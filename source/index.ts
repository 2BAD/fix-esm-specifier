import debug from 'debug'
import glob, { type Options, type Pattern } from 'fast-glob'
import { readFile, writeFile } from 'node:fs/promises'
import { performance } from 'node:perf_hooks'
import { extractImports } from './extractor.js'
import { applyFixes } from './fixer.js'
import { getPackageDependencies } from './helpers/package.js'
import { findOutDir } from './helpers/tsconfig.js'

const log = debug('tsfix:main')

/**
 * Generate options for fast-glob.
 *
 * @param extensions - File extensions, separated by commas.
 * @param [cwd] - Path that will be used as the base directory for the search. (optional)
 */
export const getOptions = (extensions: string, cwd?: string): { pattern: Pattern; options: Options } => {
  return {
    pattern: `*.{${extensions}}`,
    options: {
      absolute: true,
      baseNameMatch: true,
      braceExpansion: true,
      cwd: cwd ?? findOutDir()
    }
  }
}

/**
 * Processes a file by extracting its imports, applying fixes, and writing the fixed code back to the file.
 *
 * @param filePath - The path to the file to be processed.
 * @param dependencies - The dependencies to be considered when extracting imports.
 */
export const processFile = async (filePath: string | Buffer, dependencies: string[]): Promise<void> => {
  const sourceCode = await readFile(filePath, 'utf-8')
  log('Extracting imports from file: %s', filePath)
  const imports = extractImports(sourceCode, dependencies)
  const fixedCode = applyFixes(sourceCode, imports)
  await writeFile(filePath, fixedCode)
}

/**
 * Fixes import statements in files generated by TypeScript compiler.
 *
 * @param extensions - The extensions of the files to be processed.
 */
export const tsFix = async (extensions: string): Promise<void> => {
  const dependencies = await getPackageDependencies()
  const { pattern, options } = getOptions(extensions)

  log('Searching for files with extensions: %s', extensions)
  log('Using build directory: %s', options.cwd)

  let processedFiles = 0
  const startTime = performance.now()
  const stream = glob.stream(pattern, options)

  for await (const filePath of stream) {
    await processFile(filePath, dependencies)
    processedFiles++
  }

  const endTime = performance.now()
  const duration = (endTime - startTime).toFixed(2)
  console.log('Successfully fixed imports in %d files (%sms)', processedFiles, duration)
}
